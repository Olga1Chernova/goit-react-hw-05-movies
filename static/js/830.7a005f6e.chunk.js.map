{"version":3,"file":"static/js/830.7a005f6e.chunk.js","mappings":"8PACA,EAA8B,qCAA9B,EAAgF,oCAAhF,EAAkI,qCAAlI,EAAgL,gCAAhL,EAAwN,+BAAxN,EAA8P,8BAA9P,EAAqS,gCAArS,EAAiV,mC,SCyEjV,EAnEsB,WAAO,IAAD,EAC1B,GAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAIFE,GAAO,WAFIC,EAAAA,EAAAA,MAEKC,aAAT,eAAgBF,OAAQ,IAE/BG,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,cAAY,kBAAMH,EAASH,EAAf,GAAsB,CAACG,EAAUH,IAc5D,IAZAO,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,gHAEEC,EAAAA,EAAAA,IAAiBX,GAFnB,OAEbY,EAFa,OAGnBb,EAASa,GAHU,gDAIVC,EAJU,KAIVA,SACTC,QAAQC,IAAIF,EAASG,KAAKC,SALP,yDAAH,qDAQpBP,GACD,GAAE,CAACV,SAEiBkB,IAAjBpB,EAAMqB,OACR,MAAO,qCAMP,IAAMC,EAAQtB,EAAMqB,OAAOE,KAAI,SAAAD,GAAK,OAAIA,EAAME,IAAV,IAAgBC,KAAK,MACnDC,EACgB,OAAtB1B,EAAM2B,YACF,uFADJ,yCAEsC3B,EAAM2B,aAE9C,OACE,iCACE,oBAAQC,UAAWC,EAAYC,QAASrB,EAAxC,UACG,IADH,qBAIA,iBAAKmB,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,UACE,gBAAKD,UAAWC,EAAYE,IAAKL,EAAQM,IAAI,yBAE/C,iBAAKJ,UAAWC,EAAhB,WACE,wBAAK7B,EAAMiC,SACX,eAAIL,UAAWC,EAAf,yBACA,cAAGD,UAAWC,EAAd,SAAyB7B,EAAMkC,aAAaC,QAAQ,MACpD,eAAIP,UAAWC,EAAf,uBACA,6BAAK7B,EAAMoC,aACX,eAAIR,UAAWC,EAAf,qBACA,uBAAIP,WAGR,SAAC,KAAD,CAAMM,UAAWC,EAAevB,MAAO,CAAEF,KAAAA,GAAQiC,GAAI,OAArD,mBAGA,SAAC,KAAD,CAAMT,UAAWC,EAAevB,MAAO,CAAEF,KAAAA,GAAQiC,GAAI,UAArD,sBAGA,SAAC,KAAD,MAGL,C,sLCtEKC,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACJC,QAAS,sCAGJC,EAAc,mCAAG,sGACHL,EAASM,IAAI,uBADV,uBAClB1B,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,qDAKdL,EAAgB,mCAAG,WAAOX,GAAP,yFACToC,EAASM,IAAT,iBAAuB1C,IADd,uBACvBgB,EADuB,EACvBA,KADuB,kBAEvBA,GAFuB,2CAAH,sDAKhB2B,EAAY,mCAAG,WAAOC,GAAP,yFACLR,EAASM,IAAT,8BAAoCE,EAApC,YADK,uBACnB5B,EADmB,EACnBA,KADmB,kBAEnBA,GAFmB,2CAAH,sDAKZ6B,EAAS,mCAAG,WAAO7C,GAAP,yFACFoC,EAASM,IAAT,iBAAwB1C,EAAxB,aADE,uBAChBgB,EADgB,EAChBA,KADgB,kBAEhBA,GAFgB,2CAAH,sDAKT8B,EAAY,mCAAE,WAAO9C,GAAP,yFACJoC,EAASM,IAAT,iBAAwB1C,EAAxB,aADI,uBAClBgB,EADkB,EAClBA,KADkB,kBAElBA,GAFkB,2CAAF,qD","sources":["webpack://goit-react-hw-05-movies/./src/pages/MovieInfoPage/movie-info-page.module.scss?56e5","pages/MovieInfoPage/MovieInfoPage.jsx","shared/services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"mainWrapper\":\"movie-info-page_mainWrapper__M+PVE\",\"imgWrapper\":\"movie-info-page_imgWrapper__-9GMX\",\"textWrapper\":\"movie-info-page_textWrapper__2cRzt\",\"poster\":\"movie-info-page_poster__400sv\",\"title\":\"movie-info-page_title__u9qka\",\"vote\":\"movie-info-page_vote__fMOxc\",\"button\":\"movie-info-page_button__lqP1r\",\"movieInfo\":\"movie-info-page_movieInfo__xagvD\"};","import { useState, useEffect, useCallback } from 'react';\nimport { Link, Outlet, useParams, useNavigate, useLocation } from 'react-router-dom';\n\nimport { getMovieInfoById } from '../../shared/services/movies-api';\n\nimport css from './movie-info-page.module.scss';\n\nconst MovieInfoPage = () => {\n  const [movie, setMovie] = useState([]);\n  const { id } = useParams();\n\n  const location = useLocation();\n  //console.log(location)\n  const from = location.state?.from || \"/\";\n\n  const navigate = useNavigate(); //changes url\n  const goBack = useCallback(() => navigate(from), [navigate, from]);\n\n  useEffect(() => {\n    const fetchMovieInfo = async () => {\n      try {\n        const result = await getMovieInfoById(id);\n        setMovie(result);\n      } catch ({ response }) {\n        console.log(response.data.message);\n      }\n    };\n    fetchMovieInfo();\n  }, [id]);\n\n  if (movie.genres === undefined) {\n    return \"There are no genres for this movie\";\n    }\n    \n\n    //const poster = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n    const genre = movie.genres.map(genre => genre.name).join(', ');\n    const poster =\n    movie.poster_path === null\n      ? 'https://seekersguidance.org/wp-content/uploads/2022/10/Movie-Theatre-Film-Cinema.jpg'\n      : `https://image.tmdb.org/t/p/w500${movie.poster_path}`;  \n    \n  return (\n    <>\n      <button className={css.button} onClick={goBack}>\n        {' '}\n        &#8592; Go back\n      </button>\n      <div className={css.mainWrapper}>\n        <div className={css.imgWrapper}>\n          <img className={css.poster} src={poster} alt=\"movie information\" />\n        </div>\n        <div className={css.textWrapper}>\n          <h1>{movie.title}</h1>\n          <h2 className={css.title}>User score</h2>\n          <p className={css.vote}>{movie.vote_average.toFixed(1)}</p>\n          <h2 className={css.title}>Overview</h2>\n          <p> {movie.overview}</p>\n          <h2 className={css.title}>Genres</h2>\n          <p>{genre}</p>\n        </div>\n      </div>\n      <Link className={css.movieInfo} state={{ from }} to={'cast'}>\n        Cast\n      </Link>\n      <Link className={css.movieInfo} state={{ from }} to={'reviews'}>\n        Reviews\n      </Link>\n      <Outlet />\n    </>\n  );\n};\n\nexport default MovieInfoPage;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n        api_key: 'cf961b1b89f4c4a28558be2b04fdd59a',\n    }\n}) //params for all project\nexport const trendingMovies = async () => {\n    const { data } = await instance.get('/trending/movie/day');\n    return data;\n}\n\nexport const getMovieInfoById = async (id) => {\n  const {data} = await instance.get(`/movie/${id}`);\n  return data;\n}\n\nexport const searchMovies = async (search) => {\n  const {data} = await instance.get(`/search/movie?query=${search}&page=1`);\n  return data;\n}\n\nexport const movieCast = async (id) => {\n  const {data} = await instance.get (`/movie/${id}/credits`);\n  return data;\n}\n\nexport const movieReviews= async (id) => {\n  const {data} = await instance.get (`/movie/${id}/reviews`);\n  return data;\n}"],"names":["useState","movie","setMovie","id","useParams","from","useLocation","state","navigate","useNavigate","goBack","useCallback","useEffect","fetchMovieInfo","getMovieInfoById","result","response","console","log","data","message","undefined","genres","genre","map","name","join","poster","poster_path","className","css","onClick","src","alt","title","vote_average","toFixed","overview","to","instance","axios","baseURL","params","api_key","trendingMovies","get","searchMovies","search","movieCast","movieReviews"],"sourceRoot":""}